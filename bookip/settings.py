"""
Django settings for bookip project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
from .juzzmin import JAZZMIN_SETTINGS as JAZZMIN_CONF
from os import path as os_path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='unsafe-secret-key')

ENCRYPTION_KEY = config('ENCRYPTION_KEY', default='unsafe-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.microsoft',
    'allauth.socialaccount.providers.apple',
    'dj_rest_auth',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    "accounts.apps.AccountsConfig",
    "eccomerce.apps.EccomerceConfig",
    "query.apps.QueryConfig",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookip.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookip.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': config('DATABASE_HOST', default='localhost'),
        'PORT': config('DATABASE_PORT', default='5432'),
        'CONN_MAX_AGE': 600,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os_path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"

MEDIA_ROOT = os_path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

JAZZMIN_SETTINGS = JAZZMIN_CONF

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django All Auth
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Configure allauth for email-based authentication
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Options: "mandatory", "optional", or "none"

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Set access token expiry time
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # Set refresh token expiry time
    'ROTATE_REFRESH_TOKENS': True,                  # Option to rotate refresh tokens
    'BLACKLIST_AFTER_ROTATION': True,               # Blacklist tokens after rotation
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'accounts.throttling.RedisThrottle',  # Custom throttle class
        'eccomerce.throttling.RedisThrottle',  # Custom throttle class
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/hour',  # Rate limit for authenticated users
        'anon': '60/minute',  # Rate limit for anonymous users
    },
}

DJ_REST_AUTH = {
    'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer',
    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',
}

AUTH_USER_MODEL = 'accounts.MainUser'

DJ_REST_AUTH_REGISTER_SERIALIZER = 'accounts.serializers.MainRegisterSerializer'

if DEBUG != True:
    SECURE_HSTS_SECONDS = config('SECURE_HSTS_SECONDS', cast=int, default=31536000)  # 1 year in seconds
    SECURE_HSTS_INCLUDE_SUBDOMAINS = config('SECURE_HSTS_INCLUDE_SUBDOMAINS', cast=bool, default=True)
    SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', cast=bool, default=True)

    # Enforce HTTPS through the website
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', cast=bool, default=False)

    # When in production, use Secure Cookies (ensure HTTPS)
    SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', cast=bool, default=True)
    CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', cast=bool, default=True)

    # Disable content sniffing and force content types to be correct
    SECURE_CONTENT_TYPE_NOSNIFF = config('SECURE_CONTENT_TYPE_NOSNIFF', cast=bool, default=True)

    # Use the X-Content-Type-Options header for security
    SECURE_BROWSER_XSS_FILTER = config('SECURE_BROWSER_XSS_FILTER', cast=bool, default=True)

    # Only allow secure (HTTPS) cookies
    SECURE_COOKIE_HTTPONLY = config('SECURE_COOKIE_HTTPONLY', cast=bool, default=True)

# CROSS ORIGIN
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', cast=bool, default=False)

# Allow Specific Origins
# CORS_ALLOWED_ORIGINS = [
#     "https://example.com",
#     "https://anotherdomain.com",
# ]

# Allow Credentials
CORS_ALLOW_CREDENTIALS = config('CORS_ALLOW_CREDENTIALS', cast=bool, default=False)

# Allow Specific HTTP Methods
# CORS_ALLOW_METHODS = [
#     "GET",
#     "POST",
#     "PUT",
#     "DELETE",
# ]

# Allow Specific Header
# CORS_ALLOW_HEADERS = [
#     "content-type",
#     "authorization",
#     "x-custom-header",
# ]

# OAUTH INTEGRATION
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    },
    'facebook': {
        'SCOPE': [
            'email',
            'public_profile',
        ],
        'AUTH_PARAMS': {
            'auth_type': 'rerequest',
        },
    },
    'github': {
        'SCOPE': ['user', 'email'],
    },
    'microsoft': {
        'SCOPE': ['User.Read'],
    },
    'apple': {
        'SCOPE': ['name', 'email'],
        'CLIENT_ID': config('SOCIAL_AUTH_APPLE_CLIENT_ID'),
        'CLIENT_SECRET': config('SOCIAL_AUTH_APPLE_SECRET'),
        'AUTH_PARAMS': {
            'response_mode': 'form_post',
        },
    },
}

SOCIAL_AUTH_GOOGLE_CLIENT_ID = config('SOCIAL_AUTH_GOOGLE_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_SECRET = config('SOCIAL_AUTH_GOOGLE_SECRET')

SOCIAL_AUTH_FACEBOOK_CLIENT_ID = config('SOCIAL_AUTH_FACEBOOK_CLIENT_ID')
SOCIAL_AUTH_FACEBOOK_SECRET = config('SOCIAL_AUTH_FACEBOOK_SECRET')

SOCIAL_AUTH_GITHUB_CLIENT_ID = config('SOCIAL_AUTH_GITHUB_CLIENT_ID')
SOCIAL_AUTH_GITHUB_SECRET = config('SOCIAL_AUTH_GITHUB_SECRET')

SOCIAL_AUTH_MICROSOFT_CLIENT_ID = config('SOCIAL_AUTH_MICROSOFT_CLIENT_ID')
SOCIAL_AUTH_MICROSOFT_SECRET = config('SOCIAL_AUTH_MICROSOFT_SECRET')

SOCIAL_AUTH_APPLE_CLIENT_ID = config('SOCIAL_AUTH_APPLE_CLIENT_ID')
SOCIAL_AUTH_APPLE_SECRET = config('SOCIAL_AUTH_APPLE_SECRET')


# REDIS AS CACHE BACKGROUND
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config('REDIS_URL'),  # Redis server location and database index
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
